
class scale
{
	method init()
	{
	  $.scaleseqswitch=0
	  
		# members if single scale
		#=============
    $.pmap=[] 	# pitch map
		$.mpmap=[] 	# mirror pitch map
		$.scseq=[]	# scale sequence
    $.n_pclass=0
    
    #scales
	$.scales=[
		"harmin"=seq(0,2,3,5,7,8,11),
		"melmin"=seq(0,2,3,5,7,9,11),
		"hung"=seq(0,2,3,6,7,8,11),
		"orient"=seq(0,2,4,7,9),
		"pent"=seq(0,2,4,7,11),
		"jazz"=seq(0,3,5,6,7,10),
		"maj"=seq(0,2,4,5,7,9,11),
		"oct"=seq(0,2,3,5,6,8,9,11),
		"01-01" = seq(0), 
		"02-01" = seq(0, 1), 
		"02-02" = seq(0, 2), 
		"02-03" = seq(0, 3), 
		"02-04" = seq(0, 4), 
		"02-05" = seq(0, 5), 
		"02-06" = seq(0, 6), 
		"03-01" = seq(0, 1, 2), 
		"03-02" = seq(0, 1, 3), 
		"03-03" = seq(0, 1, 4), 
		"03-04" = seq(0, 1, 5), 
		"03-05" = seq(0, 1, 6), 
		"03-06" = seq(0, 2, 3), 
		"03-07" = seq(0, 2, 4), 
		"03-08" = seq(0, 2, 5), 
		"03-09" = seq(0, 2, 6), 
		"03-10" = seq(0, 2, 7), 
		"03-11" = seq(0, 3, 4), 
		"03-12" = seq(0, 3, 5), 
		"03-13" = seq(0, 3, 6), 
		"03-14" = seq(0, 3, 7), 
		"03-15" = seq(0, 4, 5), 
		"03-16" = seq(0, 4, 6), 
		"03-17" = seq(0, 4, 7), 
		"03-18" = seq(0, 4, 8), 
		"03-19" = seq(0, 5, 6), 
		"04-01" = seq(0, 1, 2, 3), 
		"04-02" = seq(0, 1, 2, 4), 
		"04-03" = seq(0, 1, 2, 5), 
		"04-04" = seq(0, 1, 2, 6), 
		"04-05" = seq(0, 1, 2, 7), 
		"04-06" = seq(0, 1, 3, 4), 
		"04-07" = seq(0, 1, 3, 5), 
		"04-08" = seq(0, 1, 3, 6), 
		"04-09" = seq(0, 1, 3, 7), 
		"04-10" = seq(0, 1, 4, 5), 
		"04-11" = seq(0, 1, 4, 6), 
		"04-12" = seq(0, 1, 4, 7), 
		"04-13" = seq(0, 1, 4, 8), 
		"04-14" = seq(0, 1, 5, 6), 
		"04-15" = seq(0, 1, 5, 7), 
		"04-16" = seq(0, 1, 5, 8), 
		"04-17" = seq(0, 1, 6, 7), 
		"04-18" = seq(0, 2, 3, 4), 
		"04-19" = seq(0, 2, 3, 5), 
		"04-20" = seq(0, 2, 3, 6), 
		"04-21" = seq(0, 2, 3, 7), 
		"04-22" = seq(0, 2, 4, 5), 
		"04-23" = seq(0, 2, 4, 6), 
		"04-24" = seq(0, 2, 4, 7), 
		"04-25" = seq(0, 2, 4, 8), 
		"04-26" = seq(0, 2, 5, 6), 
		"04-27" = seq(0, 2, 5, 7), 
		"04-28" = seq(0, 2, 5, 8), 
		"04-29" = seq(0, 2, 6, 7), 
		"04-30" = seq(0, 2, 6, 8), 
		"04-31" = seq(0, 3, 4, 5), 
		"04-32" = seq(0, 3, 4, 6), 
		"04-33" = seq(0, 3, 4, 7), 
		"04-34" = seq(0, 3, 4, 8), 
		"04-35" = seq(0, 3, 5, 6), 
		"04-36" = seq(0, 3, 5, 7), 
		"04-37" = seq(0, 3, 5, 8), 
		"04-38" = seq(0, 3, 6, 7), 
		"04-39" = seq(0, 3, 6, 8), 
		"04-40" = seq(0, 3, 6, 9), 
		"04-41" = seq(0, 4, 5, 6), 
		"04-42" = seq(0, 4, 5, 7), 
		"04-43" = seq(0, 4, 6, 7), 
		"05-01" = seq(0, 1, 2, 3, 4), 
		"05-02" = seq(0, 1, 2, 3, 5), 
		"05-03" = seq(0, 1, 2, 3, 6), 
		"05-04" = seq(0, 1, 2, 3, 7), 
		"05-05" = seq(0, 1, 2, 4, 5), 
		"05-06" = seq(0, 1, 2, 4, 6), 
		"05-07" = seq(0, 1, 2, 4, 7), 
		"05-08" = seq(0, 1, 2, 4, 8), 
		"05-09" = seq(0, 1, 2, 5, 6), 
		"05-10" = seq(0, 1, 2, 5, 7), 
		"05-11" = seq(0, 1, 2, 5, 8), 
		"05-12" = seq(0, 1, 2, 6, 7), 
		"05-13" = seq(0, 1, 2, 6, 8), 
		"05-14" = seq(0, 1, 3, 4, 5), 
		"05-15" = seq(0, 1, 3, 4, 6), 
		"05-16" = seq(0, 1, 3, 4, 7), 
		"05-17" = seq(0, 1, 3, 4, 8), 
		"05-18" = seq(0, 1, 3, 5, 6), 
		"05-19" = seq(0, 1, 3, 5, 7), 
		"05-20" = seq(0, 1, 3, 5, 8), 
		"05-21" = seq(0, 1, 3, 6, 7), 
		"05-22" = seq(0, 1, 3, 6, 8), 
		"05-23" = seq(0, 1, 3, 6, 9), 
		"05-24" = seq(0, 1, 4, 5, 6), 
		"05-25" = seq(0, 1, 4, 5, 7), 
		"05-26" = seq(0, 1, 4, 5, 8), 
		"05-27" = seq(0, 1, 4, 6, 7), 
		"05-28" = seq(0, 1, 4, 6, 8), 
		"05-29" = seq(0, 1, 4, 6, 9), 
		"05-30" = seq(0, 1, 4, 7, 8), 
		"05-31" = seq(0, 1, 5, 6, 7), 
		"05-32" = seq(0, 1, 5, 6, 8), 
		"05-33" = seq(0, 2, 3, 4, 5), 
		"05-34" = seq(0, 2, 3, 4, 6), 
		"05-35" = seq(0, 2, 3, 4, 7), 
		"05-36" = seq(0, 2, 3, 4, 8), 
		"05-37" = seq(0, 2, 3, 5, 6), 
		"05-38" = seq(0, 2, 3, 5, 7), 
		"05-39" = seq(0, 2, 3, 5, 8), 
		"05-40" = seq(0, 2, 3, 6, 7), 
		"05-41" = seq(0, 2, 3, 6, 8), 
		"05-42" = seq(0, 2, 3, 6, 9), 
		"05-43" = seq(0, 2, 3, 7, 8), 
		"05-44" = seq(0, 2, 4, 5, 6), 
		"05-45" = seq(0, 2, 4, 5, 7), 
		"05-46" = seq(0, 2, 4, 5, 8), 
		"05-47" = seq(0, 2, 4, 6, 7), 
		"05-48" = seq(0, 2, 4, 6, 8), 
		"05-49" = seq(0, 2, 4, 6, 9), 
		"05-50" = seq(0, 2, 4, 7, 8), 
		"05-51" = seq(0, 2, 4, 7, 9), 
		"05-52" = seq(0, 2, 5, 6, 7), 
		"05-53" = seq(0, 2, 5, 6, 8), 
		"05-54" = seq(0, 2, 5, 6, 9), 
		"05-55" = seq(0, 2, 5, 7, 8), 
		"05-56" = seq(0, 3, 4, 5, 6), 
		"05-57" = seq(0, 3, 4, 5, 7), 
		"05-58" = seq(0, 3, 4, 5, 8), 
		"05-59" = seq(0, 3, 4, 6, 7), 
		"05-60" = seq(0, 3, 4, 6, 8), 
		"05-61" = seq(0, 3, 4, 7, 8), 
		"05-62" = seq(0, 3, 5, 6, 7), 
		"05-63" = seq(0, 3, 5, 6, 8), 
		"05-64" = seq(0, 3, 5, 7, 8), 
		"05-65" = seq(0, 3, 6, 7, 8), 
		"05-66" = seq(0, 4, 5, 6, 7), 
		"06-01" = seq(0, 1, 2, 3, 4, 5), 
		"06-02" = seq(0, 1, 2, 3, 4, 6), 
		"06-03" = seq(0, 1, 2, 3, 4, 7), 
		"06-04" = seq(0, 1, 2, 3, 4, 8), 
		"06-05" = seq(0, 1, 2, 3, 5, 6), 
		"06-06" = seq(0, 1, 2, 3, 5, 7), 
		"06-07" = seq(0, 1, 2, 3, 5, 8), 
		"06-08" = seq(0, 1, 2, 3, 6, 7), 
		"06-09" = seq(0, 1, 2, 3, 6, 8), 
		"06-10" = seq(0, 1, 2, 3, 6, 9), 
		"06-11" = seq(0, 1, 2, 3, 7, 8), 
		"06-12" = seq(0, 1, 2, 4, 5, 6), 
		"06-13" = seq(0, 1, 2, 4, 5, 7), 
		"06-14" = seq(0, 1, 2, 4, 5, 8), 
		"06-15" = seq(0, 1, 2, 4, 6, 7), 
		"06-16" = seq(0, 1, 2, 4, 6, 8), 
		"06-17" = seq(0, 1, 2, 4, 6, 9), 
		"06-18" = seq(0, 1, 2, 4, 7, 8), 
		"06-19" = seq(0, 1, 2, 4, 7, 9), 
		"06-20" = seq(0, 1, 2, 5, 6, 7), 
		"06-21" = seq(0, 1, 2, 5, 6, 8), 
		"06-22" = seq(0, 1, 2, 5, 6, 9), 
		"06-23" = seq(0, 1, 2, 5, 7, 8), 
		"06-24" = seq(0, 1, 2, 5, 7, 9), 
		"06-25" = seq(0, 1, 2, 6, 7, 8), 
		"06-26" = seq(0, 1, 3, 4, 5, 6), 
		"06-27" = seq(0, 1, 3, 4, 5, 7), 
		"06-28" = seq(0, 1, 3, 4, 5, 8), 
		"06-29" = seq(0, 1, 3, 4, 6, 7), 
		"06-30" = seq(0, 1, 3, 4, 6, 8), 
		"06-31" = seq(0, 1, 3, 4, 6, 9), 
		"06-32" = seq(0, 1, 3, 4, 7, 8), 
		"06-33" = seq(0, 1, 3, 4, 7, 9), 
		"06-34" = seq(0, 1, 3, 5, 6, 7), 
		"06-35" = seq(0, 1, 3, 5, 6, 8), 
		"06-36" = seq(0, 1, 3, 5, 6, 9), 
		"06-37" = seq(0, 1, 3, 5, 7, 8), 
		"06-38" = seq(0, 1, 3, 5, 7, 9), 
		"06-39" = seq(0, 1, 3, 6, 7, 8), 
		"06-40" = seq(0, 1, 3, 6, 7, 9), 
		"06-41" = seq(0, 1, 4, 5, 6, 7), 
		"06-42" = seq(0, 1, 4, 5, 6, 8), 
		"06-43" = seq(0, 1, 4, 5, 6, 9), 
		"06-44" = seq(0, 1, 4, 5, 7, 8), 
		"06-45" = seq(0, 1, 4, 5, 7, 9), 
		"06-46" = seq(0, 1, 4, 5, 8, 9), 
		"06-47" = seq(0, 1, 4, 6, 7, 8), 
		"06-48" = seq(0, 1, 4, 6, 7, 9), 
		"06-49" = seq(0, 2, 3, 4, 5, 6), 
		"06-50" = seq(0, 2, 3, 4, 5, 7), 
		"06-51" = seq(0, 2, 3, 4, 5, 8), 
		"06-52" = seq(0, 2, 3, 4, 6, 7), 
		"06-53" = seq(0, 2, 3, 4, 6, 8), 
		"06-54" = seq(0, 2, 3, 4, 6, 9), 
		"06-55" = seq(0, 2, 3, 4, 7, 8), 
		"06-56" = seq(0, 2, 3, 4, 7, 9), 
		"06-57" = seq(0, 2, 3, 5, 6, 7), 
		"06-58" = seq(0, 2, 3, 5, 6, 8), 
		"06-59" = seq(0, 2, 3, 5, 6, 9), 
		"06-60" = seq(0, 2, 3, 5, 7, 8), 
		"06-61" = seq(0, 2, 3, 5, 7, 9), 
		"06-62" = seq(0, 2, 3, 6, 7, 8), 
		"06-63" = seq(0, 2, 3, 6, 7, 9), 
		"06-64" = seq(0, 2, 3, 6, 8, 9), 
		"06-65" = seq(0, 2, 4, 5, 6, 7), 
		"06-66" = seq(0, 2, 4, 5, 6, 8), 
		"06-67" = seq(0, 2, 4, 5, 6, 9), 
		"06-68" = seq(0, 2, 4, 5, 7, 8), 
		"06-69" = seq(0, 2, 4, 5, 7, 9), 
		"06-70" = seq(0, 2, 4, 5, 8, 9), 
		"06-71" = seq(0, 2, 4, 6, 7, 8), 
		"06-72" = seq(0, 2, 4, 6, 7, 9), 
		"06-73" = seq(0, 2, 4, 6, 8, 9), 
		"06-74" = seq(0, 2, 4, 6, 8, 10), 
		"06-75" = seq(0, 2, 5, 6, 7, 8), 
		"06-76" = seq(0, 3, 4, 5, 6, 7), 
		"06-77" = seq(0, 3, 4, 5, 6, 8), 
		"06-78" = seq(0, 3, 4, 5, 7, 8), 
		"06-79" = seq(0, 3, 4, 6, 7, 8), 
		"06-80" = seq(0, 3, 5, 6, 7, 8), 
		"07-01" = seq(0, 1, 2, 3, 4, 5, 6), 
		"07-02" = seq(0, 1, 2, 3, 4, 5, 7), 
		"07-03" = seq(0, 1, 2, 3, 4, 5, 8), 
		"07-04" = seq(0, 1, 2, 3, 4, 6, 7), 
		"07-05" = seq(0, 1, 2, 3, 4, 6, 8), 
		"07-06" = seq(0, 1, 2, 3, 4, 6, 9), 
		"07-07" = seq(0, 1, 2, 3, 4, 7, 8), 
		"07-08" = seq(0, 1, 2, 3, 4, 7, 9), 
		"07-09" = seq(0, 1, 2, 3, 5, 6, 7), 
		"07-10" = seq(0, 1, 2, 3, 5, 6, 8), 
		"07-11" = seq(0, 1, 2, 3, 5, 6, 9), 
		"07-12" = seq(0, 1, 2, 3, 5, 7, 8), 
		"07-13" = seq(0, 1, 2, 3, 5, 7, 9), 
		"07-14" = seq(0, 1, 2, 3, 6, 7, 8), 
		"07-15" = seq(0, 1, 2, 3, 6, 7, 9), 
		"07-16" = seq(0, 1, 2, 3, 6, 8, 9), 
		"07-17" = seq(0, 1, 2, 4, 5, 6, 7), 
		"07-18" = seq(0, 1, 2, 4, 5, 6, 8), 
		"07-19" = seq(0, 1, 2, 4, 5, 6, 9), 
		"07-20" = seq(0, 1, 2, 4, 5, 7, 8), 
		"07-21" = seq(0, 1, 2, 4, 5, 7, 9), 
		"07-22" = seq(0, 1, 2, 4, 5, 8, 9), 
		"07-23" = seq(0, 1, 2, 4, 6, 7, 8), 
		"07-24" = seq(0, 1, 2, 4, 6, 7, 9), 
		"07-25" = seq(0, 1, 2, 4, 6, 8, 9), 
		"07-26" = seq(0, 1, 2, 4, 6, 8, 10), 
		"07-27" = seq(0, 1, 2, 5, 6, 7, 8), 
		"07-28" = seq(0, 1, 2, 5, 6, 7, 9), 
		"07-29" = seq(0, 1, 2, 5, 6, 8, 9), 
		"07-30" = seq(0, 1, 3, 4, 5, 6, 7), 
		"07-31" = seq(0, 1, 3, 4, 5, 6, 8), 
		"07-32" = seq(0, 1, 3, 4, 5, 6, 9), 
		"07-33" = seq(0, 1, 3, 4, 5, 7, 8), 
		"07-34" = seq(0, 1, 3, 4, 5, 7, 9), 
		"07-35" = seq(0, 1, 3, 4, 5, 8, 9), 
		"07-36" = seq(0, 1, 3, 4, 6, 7, 8), 
		"07-37" = seq(0, 1, 3, 4, 6, 7, 9), 
		"07-38" = seq(0, 1, 3, 4, 6, 8, 9), 
		"07-39" = seq(0, 1, 3, 4, 6, 8, 10), 
		"07-40" = seq(0, 1, 3, 5, 6, 7, 8), 
		"07-41" = seq(0, 1, 3, 5, 6, 7, 9), 
		"07-42" = seq(0, 1, 3, 5, 6, 8, 9), 
		"07-43" = seq(0, 1, 3, 5, 6, 8, 10), 
		"07-44" = seq(0, 1, 3, 5, 7, 8, 9), 
		"07-45" = seq(0, 1, 4, 5, 6, 7, 8), 
		"07-46" = seq(0, 1, 4, 5, 6, 7, 9), 
		"07-47" = seq(0, 2, 3, 4, 5, 6, 7), 
		"07-48" = seq(0, 2, 3, 4, 5, 6, 8), 
		"07-49" = seq(0, 2, 3, 4, 5, 6, 9), 
		"07-50" = seq(0, 2, 3, 4, 5, 7, 8), 
		"07-51" = seq(0, 2, 3, 4, 5, 7, 9), 
		"07-52" = seq(0, 2, 3, 4, 5, 8, 9), 
		"07-53" = seq(0, 2, 3, 4, 6, 7, 8), 
		"07-54" = seq(0, 2, 3, 4, 6, 7, 9), 
		"07-55" = seq(0, 2, 3, 4, 6, 8, 9), 
		"07-56" = seq(0, 2, 3, 4, 7, 8, 9), 
		"07-57" = seq(0, 2, 3, 5, 6, 7, 8), 
		"07-58" = seq(0, 2, 3, 5, 6, 7, 9), 
		"07-59" = seq(0, 2, 3, 5, 6, 8, 9), 
		"07-60" = seq(0, 2, 3, 5, 7, 8, 9), 
		"07-61" = seq(0, 2, 4, 5, 6, 7, 8), 
		"07-62" = seq(0, 2, 4, 5, 6, 7, 9), 
		"07-63" = seq(0, 2, 4, 5, 6, 8, 9), 
		"07-64" = seq(0, 2, 4, 5, 7, 8, 9), 
		"07-65" = seq(0, 2, 4, 6, 7, 8, 9), 
		"07-66" = seq(0, 3, 4, 5, 6, 7, 8), 
		"08-01" = seq(0, 1, 2, 3, 4, 5, 6, 7), 
		"08-02" = seq(0, 1, 2, 3, 4, 5, 6, 8), 
		"08-03" = seq(0, 1, 2, 3, 4, 5, 6, 9), 
		"08-04" = seq(0, 1, 2, 3, 4, 5, 7, 8), 
		"08-05" = seq(0, 1, 2, 3, 4, 5, 7, 9), 
		"08-06" = seq(0, 1, 2, 3, 4, 5, 8, 9), 
		"08-07" = seq(0, 1, 2, 3, 4, 6, 7, 8), 
		"08-08" = seq(0, 1, 2, 3, 4, 6, 7, 9), 
		"08-09" = seq(0, 1, 2, 3, 4, 6, 8, 9), 
		"08-10" = seq(0, 1, 2, 3, 4, 6, 8, 10), 
		"08-11" = seq(0, 1, 2, 3, 4, 7, 8, 9), 
		"08-12" = seq(0, 1, 2, 3, 5, 6, 7, 8), 
		"08-13" = seq(0, 1, 2, 3, 5, 6, 7, 9), 
		"08-14" = seq(0, 1, 2, 3, 5, 6, 8, 9), 
		"08-15" = seq(0, 1, 2, 3, 5, 6, 8, 10), 
		"08-16" = seq(0, 1, 2, 3, 5, 7, 8, 9), 
		"08-17" = seq(0, 1, 2, 3, 5, 7, 8, 10), 
		"08-18" = seq(0, 1, 2, 3, 6, 7, 8, 9), 
		"08-19" = seq(0, 1, 2, 4, 5, 6, 7, 8), 
		"08-20" = seq(0, 1, 2, 4, 5, 6, 7, 9), 
		"08-21" = seq(0, 1, 2, 4, 5, 6, 8, 9), 
		"08-22" = seq(0, 1, 2, 4, 5, 6, 8, 10), 
		"08-23" = seq(0, 1, 2, 4, 5, 7, 8, 9), 
		"08-24" = seq(0, 1, 2, 4, 5, 7, 8, 10), 
		"08-25" = seq(0, 1, 2, 4, 6, 7, 8, 9), 
		"08-26" = seq(0, 1, 2, 4, 6, 7, 8, 10), 
		"08-27" = seq(0, 1, 3, 4, 5, 6, 7, 8), 
		"08-28" = seq(0, 1, 3, 4, 5, 6, 7, 9), 
		"08-29" = seq(0, 1, 3, 4, 5, 6, 8, 9), 
		"08-30" = seq(0, 1, 3, 4, 5, 6, 8, 10), 
		"08-31" = seq(0, 1, 3, 4, 5, 7, 8, 9), 
		"08-32" = seq(0, 1, 3, 4, 5, 7, 8, 10), 
		"08-33" = seq(0, 1, 3, 4, 6, 7, 8, 9), 
		"08-34" = seq(0, 1, 3, 4, 6, 7, 8, 10), 
		"08-35" = seq(0, 1, 3, 4, 6, 7, 9, 10), 
		"08-36" = seq(0, 1, 3, 5, 6, 7, 8, 9), 
		"08-37" = seq(0, 2, 3, 4, 5, 6, 7, 8), 
		"08-38" = seq(0, 2, 3, 4, 5, 6, 7, 9), 
		"08-39" = seq(0, 2, 3, 4, 5, 6, 8, 9), 
		"08-40" = seq(0, 2, 3, 4, 5, 7, 8, 9), 
		"08-41" = seq(0, 2, 3, 4, 6, 7, 8, 9), 
		"08-42" = seq(0, 2, 3, 5, 6, 7, 8, 9), 
		"08-43" = seq(0, 2, 4, 5, 6, 7, 8, 9), 
		"09-01" = seq(0, 1, 2, 3, 4, 5, 6, 7, 8), 
		"09-02" = seq(0, 1, 2, 3, 4, 5, 6, 7, 9), 
		"09-03" = seq(0, 1, 2, 3, 4, 5, 6, 8, 9), 
		"09-04" = seq(0, 1, 2, 3, 4, 5, 6, 8, 10), 
		"09-05" = seq(0, 1, 2, 3, 4, 5, 7, 8, 9), 
		"09-06" = seq(0, 1, 2, 3, 4, 5, 7, 8, 10), 
		"09-07" = seq(0, 1, 2, 3, 4, 6, 7, 8, 9), 
		"09-08" = seq(0, 1, 2, 3, 4, 6, 7, 8, 10), 
		"09-09" = seq(0, 1, 2, 3, 4, 6, 7, 9, 10), 
		"09-10" = seq(0, 1, 2, 3, 5, 6, 7, 8, 9), 
		"09-11" = seq(0, 1, 2, 3, 5, 6, 7, 8, 10), 
		"09-12" = seq(0, 1, 2, 3, 5, 6, 7, 9, 10), 
		"09-13" = seq(0, 1, 2, 4, 5, 6, 7, 8, 9), 
		"09-14" = seq(0, 1, 2, 4, 5, 6, 7, 8, 10), 
		"09-15" = seq(0, 1, 2, 4, 5, 6, 7, 9, 10), 
		"09-16" = seq(0, 1, 2, 4, 5, 6, 8, 9, 10), 
		"09-17" = seq(0, 1, 3, 4, 5, 6, 7, 8, 9), 
		"09-18" = seq(0, 1, 3, 4, 5, 6, 7, 8, 10), 
		"09-19" = seq(0, 2, 3, 4, 5, 6, 7, 8, 9), 
		"10-01" = seq(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 
		"10-02" = seq(0, 1, 2, 3, 4, 5, 6, 7, 8, 10), 
		"10-03" = seq(0, 1, 2, 3, 4, 5, 6, 7, 9, 10), 
		"10-04" = seq(0, 1, 2, 3, 4, 5, 6, 8, 9, 10), 
		"10-05" = seq(0, 1, 2, 3, 4, 5, 7, 8, 9, 10), 
		"10-06" = seq(0, 1, 2, 3, 4, 6, 7, 8, 9, 10), 
		"11-01" = seq(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
		"12-01" = seq(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
		"0-1"= seq(),
		"1-1"= seq(0),
		"2-1"= seq(0,1),
		"2-2"= seq(0,2),
		"2-3"= seq(0,3),
		"2-4"= seq(0,4),
		"2-5"= seq(0,5),
		"2-6"= seq(0,6),
		"3-1"= seq(0,1,2),
		"3-10"= seq(0,3,6),
		"3-11A"= seq(0,3,7),
		"3-11B"= seq(0,4,7),
		"3-12"= seq(0,4,8),
		"3-2A"= seq(0,1,3),
		"3-2B"= seq(0,2,3),
		"3-3A"= seq(0,1,4),
		"3-3B"= seq(0,3,4),
		"3-4A"= seq(0,1,5),
		"3-4B"= seq(0,4,5),
		"3-5A"= seq(0,1,6),
		"3-5B"= seq(0,5,6),
		"3-6"= seq(0,2,4),
		"3-7A"= seq(0,2,5),
		"3-7B"= seq(0,3,5),
		"3-8A"= seq(0,2,6),
		"3-8B"= seq(0,4,6),
		"3-9"= seq(0,2,7),
		"4-1"= seq(0,1,2,3),
		"4-10"= seq(0,2,3,5),
		"4-11A"= seq(0,1,3,5),
		"4-11B"= seq(0,2,4,5),
		"4-12A"= seq(0,2,3,6),
		"4-12B"= seq(0,3,4,6),
		"4-13A"= seq(0,1,3,6),
		"4-13B"= seq(0,3,5,6),
		"4-14A"= seq(0,2,3,7),
		"4-14B"= seq(0,4,5,7),
		"4-16A"= seq(0,1,5,7),
		"4-16B"= seq(0,2,6,7),
		"4-17"= seq(0,3,4,7),
		"4-18A"= seq(0,1,4,7),
		"4-18B"= seq(0,3,6,7),
		"4-19A"= seq(0,1,4,8),
		"4-19B"= seq(0,3,4,8),
		"4-20"= seq(0,1,5,8),
		"4-21"= seq(0,2,4,6),
		"4-22A"= seq(0,2,4,7),
		"4-22B"= seq(0,3,5,7),
		"4-23"= seq(0,2,5,7),
		"4-24"= seq(0,2,4,8),
		"4-25"= seq(0,2,6,8),
		"4-26"= seq(0,3,5,8),
		"4-27A"= seq(0,2,5,8),
		"4-27B"= seq(0,3,6,8),
		"4-28"= seq(0,3,6,9),
		"4-2A"= seq(0,1,2,4),
		"4-2B"= seq(0,2,3,4),
		"4-3"= seq(0,1,3,4),
		"4-4A"= seq(0,1,2,5),
		"4-4B"= seq(0,3,4,5),
		"4-5A"= seq(0,1,2,6),
		"4-5B"= seq(0,4,5,6),
		"4-6"= seq(0,1,2,7),
		"4-7"= seq(0,1,4,5),
		"4-8"= seq(0,1,5,6),
		"4-9"= seq(0,1,6,7),
		"4-z15A"= seq(0,1,4,6),
		"4-z15B"= seq(0,2,5,6),
		"4-z29A"= seq(0,1,3,7),
		"4-z29B"= seq(0,4,6,7),
		"5-1"= seq(0,1,2,3,4),
		"5-10A"= seq(0,1,3,4,6),
		"5-10B"= seq(0,2,3,5,6),
		"5-11A"= seq(0,2,3,4,7),
		"5-11B"= seq(0,3,4,5,7),
		"5-13A"= seq(0,1,2,4,8),
		"5-13B"= seq(0,2,3,4,8),
		"5-14A"= seq(0,1,2,5,7),
		"5-14B"= seq(0,2,5,6,7),
		"5-15"= seq(0,1,2,6,8),
		"5-16A"= seq(0,1,3,4,7),
		"5-16B"= seq(0,3,4,6,7),
		"5-19A"= seq(0,1,3,6,7),
		"5-19B"= seq(0,1,4,6,7),
		"5-20A"= seq(0,1,5,6,8),
		"5-20B"= seq(0,2,3,7,8),
		"5-21A"= seq(0,1,4,5,8),
		"5-21B"= seq(0,3,4,7,8),
		"5-22"= seq(0,1,4,7,8),
		"5-23A"= seq(0,2,3,5,7),
		"5-23B"= seq(0,2,4,5,7),
		"5-24A"= seq(0,1,3,5,7),
		"5-24B"= seq(0,2,4,6,7),
		"5-25A"= seq(0,2,3,5,8),
		"5-25B"= seq(0,3,5,6,8),
		"5-26A"= seq(0,2,4,5,8),
		"5-26B"= seq(0,3,4,6,8),
		"5-27A"= seq(0,1,3,5,8),
		"5-27B"= seq(0,3,5,7,8),
		"5-28A"= seq(0,2,3,6,8),
		"5-28B"= seq(0,2,5,6,8),
		"5-29A"= seq(0,1,3,6,8),
		"5-29B"= seq(0,2,5,7,8),
		"5-2A"= seq(0,1,2,3,5),
		"5-2B"= seq(0,2,3,4,5),
		"5-30A"= seq(0,1,4,6,8),
		"5-30B"= seq(0,2,4,7,8),
		"5-31A"= seq(0,1,3,6,9),
		"5-31B"= seq(0,2,3,6,9),
		"5-32A"= seq(0,1,4,6,9),
		"5-32B"= seq(0,3,5,8,9),
		"5-33"= seq(0,2,4,6,8),
		"5-34"= seq(0,2,4,6,9),
		"5-35"= seq(0,2,4,7,9),
		"5-3A"= seq(0,1,2,4,5),
		"5-3B"= seq(0,1,3,4,5),
		"5-4A"= seq(0,1,2,3,6),
		"5-4B"= seq(0,3,4,5,6),
		"5-5A"= seq(0,1,2,3,7),
		"5-5B"= seq(0,4,5,6,7),
		"5-6A"= seq(0,1,2,5,6),
		"5-6B"= seq(0,1,4,5,6),
		"5-7A"= seq(0,1,2,6,7),
		"5-7B"= seq(0,1,5,6,7),
		"5-8"= seq(0,2,3,4,6),
		"5-9A"= seq(0,1,2,4,6),
		"5-9B"= seq(0,2,4,5,6),
		"5-z12"= seq(0,1,3,5,6),
		"5-z17"= seq(0,1,3,4,8),
		"5-z18A"= seq(0,1,4,5,7),
		"5-z18B"= seq(0,2,3,6,7),
		"5-z36A"= seq(0,1,2,4,7),
		"5-z36B"= seq(0,3,5,6,7),
		"5-z37"= seq(0,3,4,5,8),
		"5-z38A"= seq(0,1,2,5,8),
		"5-z38B"= seq(0,3,6,7,8),
		"6-1"= seq(0,1,2,3,4,5),
		"6-14A"= seq(0,1,3,4,5,8),
		"6-14B"= seq(0,3,4,5,7,8),
		"6-15A"= seq(0,1,2,4,5,8),
		"6-15B"= seq(0,3,4,6,7,8),
		"6-16A"= seq(0,1,4,5,6,8),
		"6-16B"= seq(0,2,3,4,7,8),
		"6-18A"= seq(0,1,2,5,7,8),
		"6-18B"= seq(0,1,3,6,7,8),
		"6-20"= seq(0,1,4,5,8,9),
		"6-21A"= seq(0,2,3,4,6,8),
		"6-21B"= seq(0,2,4,5,6,8),
		"6-22A"= seq(0,1,2,4,6,8),
		"6-22B"= seq(0,2,4,6,7,8),
		"6-27A"= seq(0,1,3,4,6,9),
		"6-27B"= seq(0,3,5,6,8,9),
		"6-2A"= seq(0,1,2,3,4,6),
		"6-2B"= seq(0,2,3,4,5,6),
		"6-30A"= seq(0,1,3,6,7,9),
		"6-30B"= seq(0,2,3,6,8,9),
		"6-31A"= seq(0,1,4,5,7,9),
		"6-31B"= seq(0,2,4,5,8,9),
		"6-32"= seq(0,2,4,5,7,9),
		"6-33A"= seq(0,2,3,5,7,9),
		"6-33B"= seq(0,2,4,6,7,9),
		"6-34A"= seq(0,1,3,5,7,9),
		"6-34B"= seq(0,2,4,6,8,9),
		"6-35"= seq(0,2,4,6,8,10),
		"6-5A"= seq(0,1,2,3,6,7),
		"6-5B"= seq(0,1,4,5,6,7),
		"6-7"= seq(0,1,2,6,7,8),
		"6-8"= seq(0,2,3,4,5,7),
		"6-9A"= seq(0,1,2,3,5,7),
		"6-9B"= seq(0,2,4,5,6,7),
		"6-z10A"= seq(0,1,3,4,5,7),
		"6-z10B"= seq(0,2,3,4,6,7),
		"6-z11A"= seq(0,1,2,4,5,7),
		"6-z11B"= seq(0,2,3,5,6,7),
		"6-z12A"= seq(0,1,2,4,6,7),
		"6-z12B"= seq(0,1,3,5,6,7),
		"6-z13"= seq(0,1,3,4,6,7),
		"6-z17A"= seq(0,1,2,4,7,8),
		"6-z17B"= seq(0,1,4,6,7,8),
		"6-z19A"= seq(0,1,3,4,7,8),
		"6-z19B"= seq(0,1,4,5,7,8),
		"6-z23"= seq(0,2,3,5,6,8),
		"6-z24A"= seq(0,1,3,4,6,8),
		"6-z24B"= seq(0,2,4,5,7,8),
		"6-z25A"= seq(0,1,3,5,6,8),
		"6-z25B"= seq(0,2,3,5,7,8),
		"6-z26"= seq(0,1,3,5,7,8),
		"6-z28"= seq(0,1,3,5,6,9),
		"6-z29"= seq(0,2,3,6,7,9),
		"6-z36A"= seq(0,1,2,3,4,7),
		"6-z36B"= seq(0,3,4,5,6,7),
		"6-z37"= seq(0,1,2,3,4,8),
		"6-z38"= seq(0,1,2,3,7,8),
		"6-z39A"= seq(0,2,3,4,5,8),
		"6-z39B"= seq(0,3,4,5,6,8),
		"6-z3A"= seq(0,1,2,3,5,6),
		"6-z3B"= seq(0,1,3,4,5,6),
		"6-z4"= seq(0,1,2,4,5,6),
		"6-z40A"= seq(0,1,2,3,5,8),
		"6-z40B"= seq(0,3,5,6,7,8),
		"6-z41A"= seq(0,1,2,3,6,8),
		"6-z41B"= seq(0,2,5,6,7,8),
		"6-z42"= seq(0,1,2,3,6,9),
		"6-z43A"= seq(0,1,2,5,6,8),
		"6-z43B"= seq(0,2,3,6,7,8),
		"6-z44A"= seq(0,1,2,5,6,9),
		"6-z44B"= seq(0,3,4,7,8,9),
		"6-z45"= seq(0,2,3,4,6,9),
		"6-z46A"= seq(0,1,2,4,6,9),
		"6-z46B"= seq(0,3,5,7,8,9),
		"6-z47A"= seq(0,1,2,4,7,9),
		"6-z47B"= seq(0,2,5,7,8,9),
		"6-z48"= seq(0,1,2,5,7,9),
		"6-z49"= seq(0,1,3,4,7,9),
		"6-z50"= seq(0,1,4,6,7,9),
		"6-z6"= seq(0,1,2,5,6,7),
		"7-1"= seq(0,1,2,3,4,5,6),
		"7-10A"= seq(0,1,2,3,4,6,9),
		"7-10B"= seq(0,2,3,4,5,6,9),
		"7-11A"= seq(0,1,3,4,5,6,8),
		"7-11B"= seq(0,2,3,4,5,7,8),
		"7-13A"= seq(0,1,2,4,5,6,8),
		"7-13B"= seq(0,2,3,4,6,7,8),
		"7-14A"= seq(0,1,2,3,5,7,8),
		"7-14B"= seq(0,1,3,5,6,7,8),
		"7-15"= seq(0,1,2,4,6,7,8),
		"7-16A"= seq(0,1,2,3,5,6,9),
		"7-16B"= seq(0,1,3,4,5,6,9),
		"7-19A"= seq(0,1,2,3,6,7,9),
		"7-19B"= seq(0,1,2,3,6,8,9),
		"7-20A"= seq(0,1,2,5,6,7,9),
		"7-20B"= seq(0,1,2,5,7,8,9),
		"7-21A"= seq(0,1,2,4,5,8,9),
		"7-21B"= seq(0,1,3,4,5,8,9),
		"7-22"= seq(0,1,2,5,6,8,9),
		"7-23A"= seq(0,2,3,4,5,7,9),
		"7-23B"= seq(0,2,4,5,6,7,9),
		"7-24A"= seq(0,1,2,3,5,7,9),
		"7-24B"= seq(0,2,4,6,7,8,9),
		"7-25A"= seq(0,2,3,4,6,7,9),
		"7-25B"= seq(0,2,3,5,6,7,9),
		"7-26A"= seq(0,1,3,4,5,7,9),
		"7-26B"= seq(0,2,4,5,6,8,9),
		"7-27A"= seq(0,1,2,4,5,7,9),
		"7-27B"= seq(0,2,4,5,7,8,9),
		"7-28A"= seq(0,1,3,5,6,7,9),
		"7-28B"= seq(0,2,3,4,6,8,9),
		"7-29A"= seq(0,1,2,4,6,7,9),
		"7-29B"= seq(0,2,3,5,7,8,9),
		"7-2A"= seq(0,1,2,3,4,5,7),
		"7-2B"= seq(0,2,3,4,5,6,7),
		"7-30A"= seq(0,1,2,4,6,8,9),
		"7-30B"= seq(0,1,3,5,7,8,9),
		"7-31A"= seq(0,1,3,4,6,7,9),
		"7-31B"= seq(0,2,3,5,6,8,9),
		"7-32A"= seq(0,1,3,4,6,8,9),
		"7-32B"= seq(0,1,3,5,6,8,9),
		"7-33"= seq(0,1,2,4,6,8,10),
		"7-34"= seq(0,1,3,4,6,8,10),
		"7-35"= seq(0,1,3,5,6,8,10),
		"7-3A"= seq(0,1,2,3,4,5,8),
		"7-3B"= seq(0,3,4,5,6,7,8),
		"7-4A"= seq(0,1,2,3,4,6,7),
		"7-4B"= seq(0,1,3,4,5,6,7),
		"7-5A"= seq(0,1,2,3,5,6,7),
		"7-5B"= seq(0,1,2,4,5,6,7),
		"7-6A"= seq(0,1,2,3,4,7,8),
		"7-6B"= seq(0,1,4,5,6,7,8),
		"7-7A"= seq(0,1,2,3,6,7,8),
		"7-7B"= seq(0,1,2,5,6,7,8),
		"7-8"= seq(0,2,3,4,5,6,8),
		"7-9A"= seq(0,1,2,3,4,6,8),
		"7-9B"= seq(0,2,4,5,6,7,8),
		"7-z12"= seq(0,1,2,3,4,7,9),
		"7-z17"= seq(0,1,2,4,5,6,9),
		"7-z18A"= seq(0,1,4,5,6,7,9),
		"7-z18B"= seq(0,1,4,6,7,8,9),
		"7-z36A"= seq(0,1,2,3,5,6,8),
		"7-z36B"= seq(0,2,3,5,6,7,8),
		"7-z37"= seq(0,1,3,4,5,7,8),
		"7-z38A"= seq(0,1,2,4,5,7,8),
		"7-z38B"= seq(0,1,3,4,6,7,8),
		"8-1"= seq(0,1,2,3,4,5,6,7),
		"8-10"= seq(0,2,3,4,5,6,7,9),
		"8-11A"= seq(0,1,2,3,4,5,7,9),
		"8-11B"= seq(0,2,4,5,6,7,8,9),
		"8-12A"= seq(0,1,3,4,5,6,7,9),
		"8-12B"= seq(0,2,3,4,5,6,8,9),
		"8-13A"= seq(0,1,2,3,4,6,7,9),
		"8-13B"= seq(0,2,3,5,6,7,8,9),
		"8-14A"= seq(0,1,2,4,5,6,7,9),
		"8-14B"= seq(0,2,3,4,5,7,8,9),
		"8-16A"= seq(0,1,2,3,5,7,8,9),
		"8-16B"= seq(0,1,2,4,6,7,8,9),
		"8-17"= seq(0,1,3,4,5,6,8,9),
		"8-18A"= seq(0,1,2,3,5,6,8,9),
		"8-18B"= seq(0,1,3,4,6,7,8,9),
		"8-19A"= seq(0,1,2,4,5,6,8,9),
		"8-19B"= seq(0,1,3,4,5,7,8,9),
		"8-20"= seq(0,1,2,4,5,7,8,9),
		"8-21"= seq(0,1,2,3,4,6,8,10),
		"8-22A"= seq(0,1,2,3,5,6,8,10),
		"8-22B"= seq(0,1,2,3,5,7,9,10),
		"8-23"= seq(0,1,2,3,5,7,8,10),
		"8-24"= seq(0,1,2,4,5,6,8,10),
		"8-25"= seq(0,1,2,4,6,7,8,10),
		"8-26"= seq(0,1,3,4,5,7,8,10),
		"8-27A"= seq(0,1,2,4,5,7,8,10),
		"8-27B"= seq(0,1,2,4,6,7,9,10),
		"8-28"= seq(0,1,3,4,6,7,9,10),
		"8-2A"= seq(0,1,2,3,4,5,6,8),
		"8-2B"= seq(0,2,3,4,5,6,7,8),
		"8-3"= seq(0,1,2,3,4,5,6,9),
		"8-4A"= seq(0,1,2,3,4,5,7,8),
		"8-4B"= seq(0,1,3,4,5,6,7,8),
		"8-5A"= seq(0,1,2,3,4,6,7,8),
		"8-5B"= seq(0,1,2,4,5,6,7,8),
		"8-6"= seq(0,1,2,3,5,6,7,8),
		"8-7"= seq(0,1,2,3,4,5,8,9),
		"8-8"= seq(0,1,2,3,4,7,8,9),
		"8-9"= seq(0,1,2,3,6,7,8,9),
		"8-z15A"= seq(0,1,2,3,4,6,8,9),
		"8-z15B"= seq(0,1,3,5,6,7,8,9),
		"8-z29A"= seq(0,1,2,3,5,6,7,9),
		"8-z29B"= seq(0,2,3,4,6,7,8,9),
		"9-1"= seq(0,1,2,3,4,5,6,7,8),
		"9-10"= seq(0,1,2,3,4,6,7,9,10),
		"9-11A"= seq(0,1,2,3,5,6,7,9,10),
		"9-11B"= seq(0,1,2,3,5,6,8,9,10),
		"9-12"= seq(0,1,2,4,5,6,8,9,10),
		"9-2A"= seq(0,1,2,3,4,5,6,7,9),
		"9-2B"= seq(0,2,3,4,5,6,7,8,9),
		"9-3A"= seq(0,1,2,3,4,5,6,8,9),
		"9-3B"= seq(0,1,3,4,5,6,7,8,9),
		"9-4A"= seq(0,1,2,3,4,5,7,8,9),
		"9-4B"= seq(0,1,2,4,5,6,7,8,9),
		"9-5A"= seq(0,1,2,3,4,6,7,8,9),
		"9-5B"= seq(0,1,2,3,5,6,7,8,9),
		"9-6"= seq(0,1,2,3,4,5,6,8,10),
		"9-7A"= seq(0,1,2,3,4,5,7,8,10),
		"9-7B"= seq(0,1,2,3,4,5,7,9,10),
		"9-8A"= seq(0,1,2,3,4,6,7,8,10),
		"9-8B"= seq(0,1,2,3,4,6,8,9,10),
		"9-9"= seq(0,1,2,3,5,6,7,8,10),
		"10-1"= seq(0,1,2,3,4,5,6,7,8,9),
		"10-2"= seq(0,1,2,3,4,5,6,7,8,10),
		"10-3"= seq(0,1,2,3,4,5,6,7,9,10),
		"10-4"= seq(0,1,2,3,4,5,6,8,9,10),
		"10-5"= seq(0,1,2,3,4,5,7,8,9,10),
		"10-6"= seq(0,1,2,3,4,6,7,8,9,10),
		"11-1"= seq(0,1,2,3,4,5,6,7,8,9,10),
		"12-1"= seq(0,1,2,3,4,5,6,7,8,9,10,11)]
 
    #=============
    
    
    # members if scale sequence
    #=============
    $.scaleseq=[]
    $.seglength=-1
    #=============
		
		$.set(varg(argv(0,nargs())))
	}

	method print(){ print($.scseq) print(sizeof($.pmap)) }
  
  method convert(ph)
  {
    if(ph==''){return(ph)}
    if($.scaleseqswitch==1)
    {    
     sph=segph(ph, smulk($.seglength, Bpn/2))
	   ssz=sizeof(sph)
	   
	   for(i=0;i<ssz;i++)
	   {
	       sph[i]= $.scaleseq[i%sizeof($.scaleseq)].convert(sph[i])
     }
     return(seqtoph(sph))
    }
    else
    {
      ph2=onlynotes(ph)
      szn=sizeof(ph2)
      arrn=[]
      for(i=1;i<=szn;i++)
      {
        arrn[i-1]=ph2%i
      }
      phout=''
      for(i=0;i<szn;i++)
      {
        arrn[i].pitch=$.pmap[integer(arrn[i].attrib)]
        phout|=arrn[i]
      }
      
      phout.length=ph.length
      
      return(phout|nonnotes(ph))
    }
  }
  
  method tagnotes(ph)
  {
    if($.scaleseqswitch==1)
    {
       sph=segph(ph, smulk($.seglength, Bpn/2))
  	   ssz=sizeof(sph)
  	   
  	   for(i=0;i<ssz;i++)
  	   {
  	       sph[i]= $.scaleseq[i%sizeof($.scaleseq)].tagnotes(sph[i])
       }
       return(seqtoph(sph))
    }
    else
    {
      ph2=onlynotes(ph)
      szn=sizeof(ph2)
      
      for(i=1;i<=szn;i++)
      {
        tmp=$.mpmap[ph2%i.pitch]
        
        j=1
        while(tmp=="")
        {
          
          tmp=$.mpmap[ph2%i.pitch+pow(-1,j)*((j+1)/2)]
          
          j++
        }
        ph2%i.attrib=tmp
      }
      ph2.length=ph.length
      
      return(ph2|nonnotes(ph))
    }  
  }
	
	method tagconvert(ph)
	{
    return($.convert($.tagnotes(ph)))
  }
  
  # forms: set(scale, root), set(array), set(phrase)
	method set() 
	{
		if(argv(2)!="") # scale sequence
		{ 
			$.scaleseqswitch=1
			
		  if(typeof(argv(2))=="integer")
		  {
			$.seglength=seq(argv(2))
		  }
		  if(typeof(argv(2))=="array")
		  {
			$.seglength=argv(2)
		  }
		  
		  a=split(argv(0))
			  
		  sz=sizeof(a)
		  
		  for(i=0;i<sz;i++)
		  {
			tmp=split(a[i],".")
			$.scaleseq[i]=new scale(tmp[0], (decimal(tmp[1])+argv(1))%12)
		  }
		}
		else #single scale
		{
		
			$.scseq=[] a=0 b=0 c=1 $.pmap=[] $.mpmap=[]
			if(typeof(argv(0))=="string")
			{
				scopy($.scseq,$.scales[argv(0)]) arraysort($.scseq)
				for(n in $.scseq)
				{ 
					$.scseq[n]=($.scseq[n]+argv(1))%12 
				} 
				arraysort($.scseq)
			}
			if(typeof(argv(0))=="phrase")
			{
				c=[] a=0 b=0 x=0 p=argv(0) 
				for(n=1;n<=sizeof(p);n++)
				{
					p%n.pitch=(p%n.pitch)%12
				}
				for(n in p)
				{ 
					c[n.pitch]=0 
				} 
				for(n in c)
				{
					$.scseq[x]=n x+=1
				} 
				arraysort($.scseq)
			}
	  
			if(typeof(argv(0))=="array")
			{
				scopy($.scseq,argv(0)) arraysort($.scseq)
			}
		  
			while(c) {
				a=$.scseq[b%sizeof($.scseq)]+(1+($.scseq[sizeof($.scseq)-1]/12))*12*(b/sizeof($.scseq))
				if(a<128)
				{
					$.pmap[b]=a b+=1
				}
				else
				{
					c=0
				}
			}
			#the following lines were a bad idea
			#if(typeof(argv(1))=="integer") {
			#	while($.pmap[0]<argv(1)) {$.pmap = removeat($.pmap,0)}
			#}
			
			for(n in $.pmap)
			{
				$.mpmap[$.pmap[n]]=n
			}
		
			$.n_pclass=sizeof($.scseq)
		}
	}
  

  
	method play()
	{
	  if($.scaleseqswitch==1)
	  {
	   ssz=sizeof($.scaleseq)
     retval=''
	   for(i=0;i<ssz;i++)
	   {
	       retval+=$.scaleseq[i].play()
     }
     return(retval)
	  }
	  else
	  {
  		retval='' 
  		for(n in $.scseq)
  		{
  			retval+=phrase("'p"+string($.scseq[n]+60)+"'")  
  		} 
  		return(retval)
  	}
	}

	
	#Transpose on scale (ph is on scale, so is the output)
	method trans(ph, t) 
	{
    ta=[]
    
    ph2=$.tagnotes(onlynotes(ph))
        
    if(typeof(t)=="integer"){ta[0]=t}
    else{scopy(ta,t)}
    ite=(argv(2)!="")?argv(2):1
    
    n=sizeof(ta)*ite
    ln=ph.length
    
    chk=ln/n
    
    for(i=1;i<=sizeof(ph2);i++)
    {
      ph2%i.attrib+=ta[(ph2%i.time/chk)%sizeof(ta)]
    }
    
    ph2=$.convert(ph2)
    
    return(nonnotes(ph)|ph2)
    
	}

	method decluster(ph)
	{
	  if($.scaleseqswitch==1)
	  {
      sph=segph(ph, smulk($.seglength, Bpn/2))
      ssz=sizeof(sph)
      
      for(i=0;i<ssz;i++)
      {
          sph[i]= $.scaleseq[i%sizeof($.scaleseq)].decluster(sph[i], ...)
      }
      return(seqtoph(sph))
    }
	  else
    {
    
  		phs=phtoseq($.convert($.tagnotes(onlynotes(ph))))
  		sz=sizeof(phs)
  		
  		for(i=0;i<sz;i++)
  		{
  			veci=[]   # index on the map
  			vecp=[]   # pitches
  			vecc=[]   # channels
  			_notes=[] # the notes
  			
  			sz2=sizeof(phs[i])
  			
  			if(sz2>=2)
  			{
  			  
  				for(j=1;j<=sz2;j++)
  				{
  				  _notes[j-1]=phs[i]%j
  				  vecc[j-1]=phs[i]%j.chan
  					veci[j-1]=$.mpmap[phs[i]%j.pitch]
  					vecp[j-1]=phs[i]%j.pitch
  				}
  				
  				for(j=0;j<sz2-1;j++)
  				{
            
            for(k=j;k<sz2;k++)
            {
              if(k!=j)
              {
                if(vecc[j]==vecc[k])
                {
                  while((vecp[k]-vecp[j])<=1)
                  {
                    veci[k]++
                    vecp[k]=$.pmap[veci[k]]
                    _notes[k].pitch=vecp[k]
                    
                  }
                  
                  break
                }
              }
            }
  				}
  				
  				
  				for(j=0;j<sz2-1;j++)
  				{
            for(k=j;k<sz2;k++)
            {
              if(k!=j)
              {
                if(vecc[k]!=vecc[j])
                {
                  while(abs(vecp[k]-vecp[j])==1)
                  {
                    veci[k]++
                    vecp[k]=$.pmap[veci[k]]
                    _notes[k].pitch=vecp[k]
                    
                    _prev=k
                    for(l=k;l<sz2;l++)
                    {
                      if((l!=k) && (vecc[l]==vecc[k]))
                      {
                        while(abs(vecp[_prev]-vecp[l])<=1)
                        {
                          veci[l]++
                          vecp[l]=$.pmap[veci[l]]
                          _notes[l].pitch=vecp[l]
  
                        }
                        _prev=l
                      }  
                    }                
                  }
                }            
              }
            }
          }
          
  				len=phs[i].length
          phs[i]=''
          
          szn=sizeof(_notes)
          for(x=0;x<szn;x++)
          {
            _notes[x].attrib=$.mpmap[_notes[x].pitch]
          }
          
          for(j=0;j<sz2;j++){ phs[i]|=_notes[j] phs[i].length=len }
          
  			}
  		}
  		
  		return(seqtoph(phs)|nonnotes(ph))
  	}
	}



	#GENerate : Pitch index sequence, Duration (in steps) sequence
	# deep nesting, code repetition... 
	method gen(p,d) 
	{
	  if($.scaleseqswitch==1)
	  {
	   
		pa=[]
		da=[]
		if(typeof(p)=="integer" || typeof(p)=="float"){ pa=seq(p)}else{scopy(pa,p)}
		if(typeof(d)=="integer" || typeof(d)=="float"){ da=seq(d)}else{scopy(da,d)}

		szp=sizeof(pa)
		szd=sizeof(da)

		sz=szp>szd?szp:szd
		szsc=sizeof($.scaleseq)
		szsg=sizeof($.seglength)

		retval=''

		for(i=szp;i<sz;i++)
		{
			pa[i]=pa[i%szp]
		}

		for(i=szd;i<sz;i++)
		{
			da[i]=da[i%szd]
		}

		tln=sum(da)

		cues=[]

		i=0
		cues[0]=0

		while(cues[i]<tln)
		{
			i++
			cues[i]=cues[i-1]+$.seglength[i%sizeof($.seglength)]*(Bpn/2)	
		}

		tln=0
		i=0
		k=0

		for(j=0;j<sz;j++)
		{
			if(tln>=cues[k+1])
			{
			  k++
			  
			}

			tln+=da[j]

			retval+=$.scaleseq[k%sizeof($.scaleseq)].gen(seq(pa[j%szp]), seq(da[j%szd]))

		}
    }
    else
    {
  		retval=''
  		if(typeof(d)=="array")
  		{
  			szd=sizeof(d)
  			if(typeof(p)=="array")
  			{
  				szp=sizeof(p)
				
				for(a=0;a<(szd>szp?szd:szp);a++)
				{
					if(typeof(p[a%szp])=="array")
					{
						c=''
						c.length = d[a%szd]*Td
						for(b in p[a%szp])
						{ 
							c|=$.gen(p[a%szp][b],d[a%szd]) 
						}
						retval+=c
					}
					else
					{
						retval+=phrase("'p"+string($.pmap[p[a%szp]])+"d"+string(round(Td*d[a%szd]))+"'")
					}
				}
			
  			}
  			else
  			{
  				for(a=0;a<szd;a++)
  				{ 
  					retval+=phrase("'p"+string($.pmap[p])+"d"+string(round(Td*d[a%szd]))+"'") 
  				}
  			}
  		}
  		else
  		{
  			
  			if(typeof(p)=="array")
  			{
  				szp=sizeof(p)
				if(szp==0) {
					retval.length+=d*Td
				} else {
					for(a=0;a<szp;a++)
  					{
						if(typeof(p[a%szp])=="array")
						{
						
							c='' 
							for(b in p[a%szp])
							{ 
								c|=$.gen(p[a%szp][b],d) 
							}
							retval+=c
						}
						else
						{
							retval+=phrase("'p"+string($.pmap[p[a%szp]])+"d"+string(round(Td*d))+"'")
						}
					}
				}
  				

  
  			}
  			else
  			{
  				retval+=phrase("'p"+string($.pmap[p])+"d"+string(round(Td*d))+"'")
  			}
  		}
  	}
	
    retval = $.tagnotes(retval)
  	return(retval)
	}


	method flip(ph, ...)
	{
	  if($.scaleseqswitch==1)
	  {
      sph=segph(ph, smulk($.seglength, Bpn/2))
  	  ssz=sizeof(sph)
  	  
  	  l=argv(1)
  	  h=argv(2)
  	  
  	  ph2=onlynotes(ph)
  	  
  	  if(h=="")
  	  {
  	    l=129
  	    h=-1
  	    
        for(i=1;i<=sizeof(ph2);i++)
        {
          if(ph2%i.attrib<l){l=ph2%i.attrib}
          if(ph2%i.attrib>h){h=ph2%i.attrib}
        }
      }
 	   	  
  	  for(i=0;i<ssz;i++)
  	  {
  	      sph[i]= $.scaleseq[i%sizeof($.scaleseq)].flip(sph[i], l, h)
      }
      return(seqtoph(sph))
    }
    else
    {
  		l=$.mpmap[lowest(ph)] 
      h=$.mpmap[highest(ph)]
      if(argv(1)!=""){ l=argv(1) }
      if(argv(2)!=""){ h=argv(2) }
      
      return($.genericPMt("flip", ph, l, h))
    }
	}

	method norep(ph, ...)
	{
	   if($.scaleseqswitch==1)
	   {
    	 sph=segph(ph, smulk($.seglength, Bpn/2))
  	   ssz=sizeof(sph)
  	   
  	   for(i=0;i<ssz;i++)
  	   {
  	       sph[i]= $.scaleseq[i%sizeof($.scaleseq)].norep(sph[i], ...)
       }
       return(seqtoph(sph))
     }
     else
     {
       tmp=$.gen(seq(raise(repseq(stair(0,$.n_pclass),10),$.n_pclass)),1)
       
       retval=chop($.genericPMt("norep", ph+tmp, ...),ph.length/Td)
       
       return(retval)
     }
	   
	}
	
	#wraps values so that they fit in [mini,mini+amp[
	method wrap(ph, ...)
  {
    if($.scaleseqswitch==1)
    {
       sph=segph(ph, smulk($.seglength, Bpn/2))
  	   ssz=sizeof(sph)
  	   
  	   for(i=0;i<ssz;i++)
  	   {
  	       sph[i]= $.scaleseq[i%sizeof($.scaleseq)].wrap(sph[i], ...)
       }
       return(seqtoph(sph))
    }
    else
    {
      return($.genericPMt("wrap", ph, ...))
    }
		
	}

	#bounces values so that they fit in [mini,mini+amp[
	method bounce(ph, ...)
  {
    if($.scaleseqswitch==1)
    {
       sph=segph(ph, smulk($.seglength, Bpn/2))
       ssz=sizeof(sph)
       
       for(i=0;i<ssz;i++)
       {
           sph[i]= $.scaleseq[i%sizeof($.scaleseq)].bounce(sph[i], ...)
       }
       return(seqtoph(sph))
    }
    else
    {
      return($.genericPMt("bounce", ph, ...))
    }
		
	}
	
	
	method genericPMt(fname, ph, ...)
	{
	  retval=''
		
		chans=[]
		chans=sep_channels($.convert($.tagnotes(onlynotes(ph))))
		
		csz=sizeof(chans)
		
    if(csz==0)
    {
      print("This phrase has no notes.")
      return(ph)
    }
    
		if(csz==1)
		{
      phs=phtoseq(dedup(chans[0]))
      sz=sizeof(phs)
      _notes=[]
      Global_gpm_pitch_array=[]
      c=0
      r=0
      
      if(sizeof(phs[0])==0){ r=1 }
      
      for(i=r;i<sz;i++)
      {
        szp=sizeof(phs[i])
        Global_gpm_pitch_array[i-r]=[]
        _notes[i-r]=[]
        
        for(j=0;j<szp;j++)
        {
          Global_gpm_pitch_array[i-r][j]=integer((phs[i]%(j+1)).attrib)  
          _notes[i-r][j]=phs[i]%(j+1)  
        }
      }
      
  		eval("Global_gpm_pitch_array=" + fname + "seq(Global_gpm_pitch_array, ...)")
     
      for(i=0;i<sz-r;i++)
      {
        len=phs[i+r].length
        phs[i+r]=''
        for(j=0;j<sizeof(Global_gpm_pitch_array[i]);j++)
        {
          _notes[i][j].pitch=$.pmap[Global_gpm_pitch_array[i][j]]
          phs[i+r]|=_notes[i][j]
        }
        phs[i+r].length=len
      }
      
      retval=seqtoph(phs)
    }
    else
    {
      Global_gpm_retval=[]
      
      for(i=0;i<csz;i++)
      {
        eval("Global_gpm_retval[" + string(i) + "]=$.genericPMt(\"" + fname + "\", " + string(chans[i]) + ", ...)")
      }
      
      for(i=0;i<csz;i++)
      {
        retval|=Global_gpm_retval[i]
      }

    }
    szn=sizeof(retval)
    
    retval=$.tagnotes(retval)
    
    retval|=nonnotes(ph)
    retval.length=ph.length
		return(retval)
	}
	
	
}
